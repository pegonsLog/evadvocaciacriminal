rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ==========================================
    // FUNÇÕES AUXILIARES
    // ==========================================

    // Verifica se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Verifica se o usuário é administrador (usando email específico)
    function isAdmin() {
      return isAuthenticated() && request.auth.token.email == 'evadvocaciacriminal@gmail.com';
    }

    // Verifica se o usuário está ativo (simplificado)
    function isActiveUser() {
      return isAuthenticated();
    }

    // Verifica se é o próprio usuário
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // ==========================================
    // REGRAS PARA USUÁRIOS
    // ==========================================

    match /users/{userId} {
      // Leitura: Admin pode ler todos, usuário pode ler apenas seus próprios dados
      allow read: if isAdmin() || isOwner(userId);

      // Criação: Apenas admins podem criar usuários
      allow create: if isAdmin() &&
                       request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'active', 'createdAt', 'updatedAt']) &&
                       request.resource.data.uid is string &&
                       request.resource.data.email is string &&
                       request.resource.data.displayName is string &&
                       request.resource.data.role in ['ADMIN', 'COMUM'] &&
                       request.resource.data.active is bool;

      // Atualização: Admin pode atualizar qualquer usuário, usuário pode atualizar apenas seus próprios dados (exceto role e active)
      allow update: if (isAdmin()) ||
                       (isOwner(userId) &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'active', 'uid']));

      // Deleção: Apenas admins podem deletar usuários
      allow delete: if isAdmin();
    }

    // ==========================================
    // REGRAS PARA CLIENTES
    // ==========================================

    match /clientes/{clienteId} {
      // Leitura: Qualquer usuário autenticado pode ler
      allow read: if isAuthenticated();

      // Criação e Atualização: Qualquer usuário autenticado pode criar e atualizar
      allow create, update: if isAuthenticated() &&
                               request.resource.data.keys().hasAll(['nome', 'cpf', 'telefone', 'compra']) &&
                               request.resource.data.nome is string &&
                               request.resource.data.cpf is string &&
                               request.resource.data.telefone is string &&
                               request.resource.data.compra is map;

      // Deleção: Apenas administradores podem deletar clientes
      allow delete: if isAdmin();
    }

    // ==========================================
    // REGRAS PARA PARCELAS
    // ==========================================

    match /parcelas/{parcelaId} {
      // Leitura: Qualquer usuário autenticado pode ler
      allow read: if isAuthenticated();

      // Criação: Qualquer usuário autenticado pode criar
      allow create: if isAuthenticated() &&
                       request.resource.data.keys().hasAll(['clienteId', 'numeroParcela', 'valorParcela', 'dataVencimento', 'status']) &&
                       request.resource.data.clienteId is string &&
                       request.resource.data.numeroParcela is number &&
                       request.resource.data.valorParcela is number &&
                       request.resource.data.status in ['pendente', 'pago', 'atrasado'];

      // Atualização: Qualquer usuário autenticado pode atualizar
      allow update: if isAuthenticated();

      // Deleção: Apenas administradores podem deletar parcelas
      allow delete: if isAdmin();
    }

    // ==========================================
    // REGRAS PARA PAGAMENTOS
    // ==========================================

    match /pagamentos/{pagamentoId} {
      // Leitura: Qualquer usuário autenticado pode ler
      allow read: if isAuthenticated();

      // Criação e Atualização: Qualquer usuário autenticado pode criar e atualizar
      allow create, update: if isAuthenticated() &&
                               request.resource.data.keys().hasAll(['clienteId', 'valor', 'dataPagamento']) &&
                               request.resource.data.clienteId is string &&
                               request.resource.data.valor is number;

      // Deleção: Apenas administradores podem deletar pagamentos
      allow delete: if isAdmin();
    }

    // ==========================================
    // REGRA PADRÃO - NEGAR TUDO QUE NÃO FOI ESPECIFICADO
    // ==========================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}